import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Football Stats',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Autogenerated? data; // Data model instance
  StatusCode status = StatusCode.initial; // Initial status

  Future<void> fetchData() async {
    setState(() {
      status = StatusCode.loading;
    });

    try {
      final response = await http.get(
        Uri.parse(
            'https://footapi7.p.rapidapi.com/api/match/10114139/lineups'),
        headers: {
          'x-rapidapi-host': 'footapi7.p.rapidapi.com',
          'x-rapidapi-key':
              '6f8f212fa7msh661c1dad7e67ffbp11eee3jsnd1980e109e13', // Replace with your RapidAPI key
        },
      );

      if (response.statusCode == 200) {
        setState(() {
          data = Autogenerated.fromJson(jsonDecode(response.body));
          status = StatusCode.success;
        });
      } else {
        setState(() {
          status = StatusCode.error;
        });
        throw Exception('Failed to load data: ${response.statusCode}');
      }
    } catch (e) {
      setState(() {
        status = StatusCode.error;
      });
      throw Exception('Failed to load data: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Football Stats'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: fetchData,
              child: Text('Fetch Data'),
            ),
            SizedBox(height: 20),
            // Display status message based on status
            if (status == StatusCode.loading)
              CircularProgressIndicator()
            else if (status == StatusCode.success)
              Text(
                'Data Loaded Successfully!',
                style: TextStyle(color: Colors.green),
              )
            else if (status == StatusCode.error)
              Text(
                'Error occurred while loading data.',
                style: TextStyle(color: Colors.red),
              ),
            SizedBox(height: 20),
            if (data != null)
              Text(
                'Home Team:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
       if (data != null && data!.home != null)
  ...data!.home!.players!.map((player) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 10.0),
      child: Column(
        children: [
          CircleAvatar(
            radius: 30,
            backgroundColor: Colors.blue,
            child: Text(
              '${player.statistics!.rating}',
              style: TextStyle(color: Colors.white),
            ),
          ),
          SizedBox(height: 5),
          Text(player.player!.name!),
        ],
      ),
    );
  }).toList(),


            SizedBox(height: 20),
            if (data != null)
              Text(
                'Away Team:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
            if (data != null && data!.away != null)
              ...data!.away!.players!.map((player) {
                return ListTile(
                  title: Text(player.player!.name!),
                  subtitle: Text('Rating: ${player.statistics!.rating}'),
                );
              }).toList(),
          ],
        ),
      ),
    );
  }
}

class Autogenerated {
  bool? confirmed;
  Home? home;
  Home? away;

  Autogenerated({this.confirmed, this.home, this.away});

  factory Autogenerated.fromJson(Map<String, dynamic> json) {
    return Autogenerated(
      confirmed: json['confirmed'],
      home: json['home'] != null ? Home.fromJson(json['home']) : null,
      away: json['away'] != null ? Home.fromJson(json['away']) : null,
    );
  }
}

class Home {
  List<Players>? players;

  Home({this.players});

  factory Home.fromJson(Map<String, dynamic> json) {
    return Home(
      players: json['players'] != null
          ? List<Players>.from(json['players'].map((x) => Players.fromJson(x)))
          : null,
    );
  }
}

class Players {
  Player? player;
  Statistics? statistics;

  Players({this.player, this.statistics});

  factory Players.fromJson(Map<String, dynamic> json) {
    return Players(
      player: json['player'] != null ? Player.fromJson(json['player']) : null,
      statistics: json['statistics'] != null
          ? Statistics.fromJson(json['statistics'])
          : null,
    );
  }
}

class Player {
  String? name;

  Player({this.name});

  factory Player.fromJson(Map<String, dynamic> json) {
    return Player(
      name: json['name'],
    );
  }
}

class Statistics {
  double? rating;

  Statistics({this.rating});

 factory Statistics.fromJson(Map<String, dynamic> json) {
  return Statistics(
    rating: json['rating'] is int ? (json['rating'] as int).toDouble() : json['rating'],
  );
}

}

enum StatusCode {
  initial,
  loading,
  success,
  error,
}
